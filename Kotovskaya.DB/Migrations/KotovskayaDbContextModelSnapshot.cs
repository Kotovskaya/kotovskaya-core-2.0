// <auto-generated />
using System;
using Kotovskaya.DB.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kotovskaya.DB.Migrations
{
    [DbContext(typeof(KotovskayaDbContext))]
    partial class KotovskayaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("MsId")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("text");

                    b.Property<int>("DeliveryWay")
                        .HasColumnType("integer");

                    b.Property<bool>("HasAuthorDiscount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTestOrder")
                        .HasColumnType("boolean");

                    b.Property<string>("MoySkladNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PriorityOrderDate")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.OrderPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderPositions");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.ProductEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Article")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("MsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.SaleTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("SalePrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("SaleTypes");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.Category", b =>
                {
                    b.HasOne("Kotovskaya.DB.Domain.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.OrderPosition", b =>
                {
                    b.HasOne("Kotovskaya.DB.Domain.Entities.Order", "Order")
                        .WithMany("OrderPositions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kotovskaya.DB.Domain.Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.ProductEntity", b =>
                {
                    b.HasOne("Kotovskaya.DB.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.SaleTypes", b =>
                {
                    b.HasOne("Kotovskaya.DB.Domain.Entities.ProductEntity", "Product")
                        .WithOne("SaleTypes")
                        .HasForeignKey("Kotovskaya.DB.Domain.Entities.SaleTypes", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderPositions");
                });

            modelBuilder.Entity("Kotovskaya.DB.Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("SaleTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
